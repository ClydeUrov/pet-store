{"version":3,"file":"static/js/180.d7ac491e.chunk.js","mappings":"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","sources":["webpack://pet-store/./src/components/AdminFolder/AdminProfile/AdminProfile.module.scss?e01b","components/AdminFolder/AdminProfile/AdminProfile.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"productContainer\":\"AdminProfile_productContainer__788LY\",\"formContainer\":\"AdminProfile_formContainer__L0+Fg\",\"firstLine\":\"AdminProfile_firstLine__gPC1c\",\"form\":\"AdminProfile_form__EAV6D\",\"button\":\"AdminProfile_button__GRCjc\",\"submitForm\":\"AdminProfile_submitForm__byOv1\"};","import { useState } from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport css from \"./AdminProfile.module.scss\";\r\nimport FormikField from \"../../FormikFolder/FormikField\";\r\nimport { schemaAdminInformation, schemaAdminPassword } from \"../../../helpers/schemes\";\r\nimport { GoPencil } from \"react-icons/go\";\r\nimport { getUser, useUserActions } from \"../../../helpers/user.actions\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst AdminProfile = () => {\r\n  const user = getUser();\r\n  const { editProfile, editPassword } = useUserActions();\r\n  const [error, setError] = useState('');\r\n  const [editState, setEditState] = useState({\r\n    personalInfo: true,\r\n    passwordInfo: true,\r\n  });\r\n\r\n  const toggleEditState = (formName) => {\r\n    setEditState((prevEditState) => ({\r\n      ...prevEditState,\r\n      [formName]: !prevEditState[formName],\r\n    }));\r\n  };\r\n\r\n  const handleCancel = (form, formName) => {\r\n    form.handleReset();\r\n    toggleEditState(formName);\r\n  };\r\n\r\n  const handleSubmit = async (formData, formName) => {\r\n    console.log(formData, formName);\r\n    if (!editState.personalInfo) {\r\n      try {\r\n        await toast.promise(\r\n          editProfile(\r\n            {\r\n              firstName: formData.firstName,\r\n              lastName: formData.lastName,\r\n            },\r\n            {\r\n              ...user,\r\n              firstName: formData.firstName,\r\n              lastName: formData.lastName,\r\n            }\r\n          ),\r\n          {\r\n            pending: \"Personal information changing in progress\",\r\n            success: \"Personal information was changed\",\r\n            error: \"Personal information not changed, try again\",\r\n          }\r\n        );\r\n      } catch (err) {\r\n        if (err.response) {\r\n          setError(err.response.data.message);\r\n        } else {\r\n          setError(err.message);\r\n        }\r\n      }\r\n    } else {\r\n      try {\r\n        await toast.promise(\r\n          editPassword({\r\n            email: user.email,\r\n            currentPassword: formData.currentPassword,\r\n            newPassword: formData.newPassword,\r\n          }),\r\n          {\r\n            pending: \"Password changing in progress\",\r\n            success: \"Password was changed\",\r\n            error: \"Password not change, try again\",\r\n          }\r\n        );\r\n      } catch (err) {\r\n        if (err.response) {\r\n          setError(err.response.data.message);\r\n        } else {\r\n          setError(err.message);\r\n        }\r\n      }\r\n    }\r\n\r\n    toggleEditState(formName);\r\n  };\r\n\r\n  return (\r\n    <div className={css.productContainer}>\r\n      <div className={css.firstLine}>\r\n        <p>Admin information</p>\r\n      </div>\r\n      <div className={css.formContainer}>\r\n      <Formik\r\n        validationSchema={schemaAdminInformation}\r\n        initialValues={{\r\n          lastName: user.lastName,\r\n          email: user.email,\r\n          firstName: user.firstName,\r\n        }}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {(form) => (\r\n          <Form className={css.form}>\r\n            <FormikField\r\n              name=\"firstName\"\r\n              type=\"text\"\r\n              label=\"First name\"\r\n              width=\"276px\"\r\n              onChange={(e) => {form.handleChange(e)}}\r\n              disabled={editState.personalInfo}\r\n              required\r\n            />\r\n            <FormikField\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              label=\"Last name\"\r\n              width=\"276px\"\r\n              onChange={(e) => {form.handleChange(e)}}\r\n              disabled={editState.personalInfo}\r\n              required\r\n            />\r\n            <FormikField\r\n              name=\"email\"\r\n              type=\"text\"\r\n              disabled=\"true\"\r\n              label=\"E-mail\"\r\n              width=\"276px\"\r\n              value={user.email}\r\n            />\r\n            {editState.personalInfo ? (\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => toggleEditState('personalInfo')}\r\n                className={css.button}\r\n              >\r\n                Edit <GoPencil size={20} style={{marginLeft: \"5px\"}} />\r\n              </button>\r\n            ) : (\r\n              <div className={css.submitForm}>\r\n                <button type=\"submit\" className={css.button}>\r\n                  Confirm\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => handleCancel(form, 'personalInfo')}\r\n                  className={css.button}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            )}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <Formik\r\n        validationSchema={schemaAdminPassword}\r\n        initialValues={{\r\n          currentPassword: \"\",\r\n          newPassword: \"\",\r\n          confirm: \"\",\r\n        }}\r\n        onSubmit={(values, form) => handleSubmit(values, 'passwordInfo', form)}\r\n      >\r\n        {(form) => (\r\n          <Form className={css.form}>\r\n            <h3 style={{marginBottom:\"20px\"}}>Your password</h3>\r\n            <FormikField\r\n              name=\"currentPassword\"\r\n              type=\"password\"\r\n              label=\"Current password\"\r\n              width=\"276px\"\r\n              // value={form.values.currentPassword}\r\n              disabled={editState.passwordInfo}\r\n              required\r\n            />\r\n\r\n            {editState.passwordInfo ? (\r\n              <button \r\n                type=\"button\" \r\n                onClick={() => toggleEditState('passwordInfo')} \r\n                className={css.button}\r\n              >\r\n                Edit\r\n                <GoPencil size={20} style={{marginLeft: \"5px\"}} />\r\n              </button>\r\n            ) : (\r\n              <>\r\n                <FormikField\r\n                  name=\"newPassword\"\r\n                  type=\"password\"\r\n                  label=\"New password\"\r\n                  width=\"276px\"\r\n                  // value={form.values.newPassword}\r\n                  disabled={editState.passwordInfo}\r\n                  required\r\n                />\r\n                <FormikField\r\n                  name=\"confirm\"\r\n                  type=\"password\"\r\n                  label=\"Confirm new password\"\r\n                  width=\"276px\"\r\n                  // value={form.values.confirm}\r\n                  disabled={editState.passwordInfo}\r\n                  required\r\n                />\r\n                <div className={css.submitForm}>\r\n                  <button type=\"submit\" className={css.button} disabled={form.isSubmitting}>\r\n                    Confirm\r\n                  </button>\r\n                  <button type=\"button\" onClick={() => handleCancel(form, 'passwordInfo')} className={css.button}>\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      {error && <p>{error}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminProfile;"],"names":["user","getUser","_useUserActions","useUserActions","editProfile","editPassword","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","personalInfo","passwordInfo","_useState4","editState","setEditState","toggleEditState","formName","prevEditState","_objectSpread","_defineProperty","handleCancel","form","handleReset","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formData","wrap","_context","prev","next","console","log","toast","promise","firstName","lastName","pending","success","t0","response","data","message","email","currentPassword","newPassword","t1","stop","_x","_x2","apply","arguments","_jsxs","className","css","children","_jsx","Formik","validationSchema","schemaAdminInformation","initialValues","onSubmit","Form","FormikField","name","type","label","width","onChange","e","handleChange","disabled","required","value","onClick","GoPencil","size","style","marginLeft","schemaAdminPassword","confirm","values","marginBottom","_Fragment","isSubmitting"],"sourceRoot":""}